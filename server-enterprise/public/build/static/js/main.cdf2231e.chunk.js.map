{"version":3,"sources":["components/container/state/state.ts","components/container/queries/queries.ts","components/container/item.tsx","components/container/search.tsx","components/container/container.tsx","index.js","App.js"],"names":["localState","makeVar","searchString","items","orgid","SelectAll","GET_RATES","gql","GET_RATES_PLUS_CLIENT","Item","props","Col","xs","Row","currency","Form","Group","controlId","Check","type","label","Search","useApolloClient","state","Label","Control","value","onChange","e","target","size","placeholder","Text","className","Containers","client","data","loading","error","useQuery","useEffect","console","log","query","then","Container","rates","filter","f","includes","toUpperCase","map","item","ApolloClient","uri","cache","InMemoryCache","rootElement","document","getElementById","IndexComponent","render","ApolloProvider"],"mappings":"sMAYA,MAOaA,EAAaC,YAPG,CAC3BC,aAAc,GACdC,MAAO,GACPC,MAAO,EACPC,WAAW,I,wCCdN,MAAMC,EAAYC,YAAH,0GAOTC,EAAwBD,YAAH,+H,mBCN3B,SAASE,EAAKC,GACnB,OACE,cAACC,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,eAACC,EAAA,EAAD,WACE,cAACF,EAAA,EAAD,UAAMD,EAAMI,WACZ,cAACH,EAAA,EAAD,IACA,cAACA,EAAA,EAAD,UACE,cAACI,EAAA,EAAKC,MAAN,CAAYC,UAAU,oBAAtB,SACE,cAACF,EAAA,EAAKG,MAAN,CAAYC,KAAK,WAAWC,MAAM,0BCHvC,SAASC,EAAQX,GACPY,cAAf,MACMC,EAAevB,IAQrB,OACE,cAACW,EAAA,EAAD,CAAKC,GAAI,GAAT,SACE,cAACG,EAAA,EAAD,UACE,eAACA,EAAA,EAAKC,MAAN,CAAYC,UAAU,iBAAtB,UACE,cAACF,EAAA,EAAKS,MAAN,qBAGA,cAACT,EAAA,EAAKU,QAAN,CACEC,MAAOH,EAAMrB,aACbyB,SAAWC,GAAM5B,EAAW,IAAKA,IAAcE,aAAc0B,EAAEC,OAAOH,QACtEI,KAAK,KACLX,KAAK,QACLY,YAAY,iBAEd,cAAChB,EAAA,EAAKiB,KAAN,CAAWC,UAAU,sBCtBxB,SAASC,EAAYxB,GAC1B,MAAMyB,EAASb,eACT,KAAEc,EAAF,QAAQC,EAAR,MAAiBC,GAAUC,YAASjC,GACpCiB,EAAevB,IAWrB,OATAwC,qBAAU,KACRC,QAAQC,IAAInB,EAAO,kBAEnBY,EAAOQ,MAAM,CAAEA,MAAOnC,IACrBoC,MAAMR,IACLK,QAAQC,IAAIN,EAAKA,KAAM,mCAExB,CAACb,EAAMrB,eAENmC,EAAgB,yCAChBC,EAAc,uCAGhB,cAAC,WAAD,UACE,eAACO,EAAA,EAAD,WACE,cAAChC,EAAA,EAAD,UACE,eAACF,EAAA,EAAD,CAAKC,GAAI,GAAT,UACGW,EAAMrB,aACP,cAACmB,EAAD,SAGJ,cAACR,EAAA,EAAD,UACGuB,EAAKU,MACHC,QAAQC,GACPA,EAAElC,SAASmC,SAAS1B,EAAMrB,aAAagD,iBAExCC,KAAKC,GACG,cAAC3C,EAAD,CAAMK,SAAUsC,EAAKtC,oB,YClC1C,MAAMqB,EAAS,IAAIkB,IAAa,CAC9BC,IAAK,wCACLC,MAAO,IAAIC,MAGPC,EAAcC,SAASC,eAAe,QAE5C,IAAcC,EAUdC,kBAVcD,ECXC,WACb,OACE,sBAAK3B,UAAU,MAAf,UACE,6CACA,mEACA,cAACC,EAAD,QDQA,cAAC,aAAD,UACA,cAAC4B,EAAA,EAAD,CAAgB3B,OAAQA,EAAxB,SACE,cAACyB,EAAD,SAMUH,K","file":"static/js/main.cdf2231e.chunk.js","sourcesContent":["import { makeVar } from \"@apollo/client\";\r\n\r\n// shape of your local state\r\nexport interface state {\r\n  searchString: string;\r\n  items: Number[];\r\n  orgid: Number;\r\n  SelectAll: Boolean;\r\n}\r\n\r\n// Create the initial value\r\nexport type states = state;\r\nconst initialState: states = {\r\n  searchString: \"\",\r\n  items: [],\r\n  orgid: 0,\r\n  SelectAll: false\r\n}\r\n\r\nexport const localState = makeVar<states>(initialState);\r\n","import { gql } from \"@apollo/client\";\r\n\r\nexport const GET_RATES = gql`\r\n  query GetRates {\r\n    rates(currency: \"USD\") {\r\n      currency\r\n    }\r\n  }\r\n`;\r\nexport const GET_RATES_PLUS_CLIENT = gql`\r\n  query GetRates {\r\n    rates(currency: \"USD\") {\r\n      currency\r\n      local @client\r\n    }\r\n  }\r\n`;\r\n","import { ReactChild, ReactFragment, ReactPortal } from \"react\";\r\nimport { Col, Form, Row } from \"react-bootstrap\";\r\n\r\nexport function Item(props: { currency: boolean | ReactChild | ReactFragment | ReactPortal | null | undefined; }) {\r\n  return (\r\n    <Col xs={12}>\r\n      <Row>\r\n        <Col>{props.currency}</Col>\r\n        <Col></Col>\r\n        <Col>\r\n          <Form.Group controlId=\"formBasicCheckbox\">\r\n            <Form.Check type=\"checkbox\" label=\"Check me out\" />\r\n          </Form.Group>\r\n        </Col>\r\n      </Row>\r\n    </Col>\r\n  );\r\n}\r\n","import { Form, Col } from \"react-bootstrap\";\r\nimport { state } from \"./state/state\";\r\n// import { ExampleActions } from \"../localstate/operations\";\r\nimport { Containers } from \"./container\";\r\nimport { Component } from \"react\";\r\nimport { localState, states } from \"./state/state\";\r\nimport { useApolloClient } from \"@apollo/client\";\r\n\r\nexport function Search (props: any) { \r\n  const client = useApolloClient()\r\n  const state:states = localState();\r\n\r\n  const onSearch = (e: any) => {\r\n    console.log(e.target.value, \" changed value\");\r\n    console.log(state.searchString, \" searching value\");\r\n    localState({ ...localState(), searchString: e.target.value });\r\n  };\r\n\r\n  return (\r\n    <Col xs={12}>\r\n      <Form>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>\r\n            Search\r\n          </Form.Label>\r\n          <Form.Control\r\n            value={state.searchString}\r\n            onChange={(e) => localState({ ...localState(), searchString: e.target.value })}\r\n            size=\"lg\"\r\n            type=\"email\"\r\n            placeholder=\"Search rates\"\r\n          />\r\n          <Form.Text className=\"text-muted\"></Form.Text>\r\n        </Form.Group>\r\n      </Form>\r\n    </Col>\r\n  );\r\n}\r\n","// inteligent container to do all the data interation like a controller\r\n\r\nimport React, { useEffect, Fragment } from \"react\";\r\nimport { Col, Container, Row } from \"react-bootstrap\";\r\nimport { state, localState, states } from \"./state/state\";\r\nimport { useApolloClient, useQuery, useReactiveVar } from \"@apollo/client\";\r\nimport { GET_RATES, GET_RATES_PLUS_CLIENT } from \"./queries/queries\";\r\nimport { Item } from \"./item\";\r\nimport { Search } from \"./search\";\r\n\r\nexport function Containers (props: any) { \r\n  const client = useApolloClient()\r\n  const { data, loading, error } = useQuery(GET_RATES);\r\n  const state:states = localState(); \r\n\r\n  useEffect(() => {\r\n    console.log(state, \" state changed\");\r\n\r\n    client.query({ query: GET_RATES_PLUS_CLIENT })\r\n    .then((data) => {\r\n      console.log(data.data, \" got this data suing query\");\r\n    });\r\n  }, [state.searchString]);\r\n\r\n  if (loading) return <p> loading</p>;\r\n  if (error) return <p> error</p>;\r\n\r\n  return (\r\n    <Fragment>\r\n      <Container>\r\n        <Row>\r\n          <Col xs={12}>\r\n            {state.searchString}\r\n            <Search />\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          {data.rates\r\n            .filter((f: { currency: string | string[]; }) =>\r\n              f.currency.includes(state.searchString.toUpperCase())\r\n            )\r\n            .map((item: { currency: boolean | React.ReactChild | React.ReactFragment | React.ReactPortal | null | undefined; }) => {\r\n              return <Item currency={item.currency} />;\r\n            })}\r\n        </Row>\r\n      </Container>\r\n    </Fragment>\r\n  );\r\n}","import { StrictMode } from \"react\";\nimport { render } from \"react-dom\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from \"@apollo/client\";\nimport App from \"./App\";\nimport { GET_RATES } from \"./components/container/queries/queries\";\n\n// setup apollo\n\nconst client = new ApolloClient({\n  uri: \"https://48p1r2roz4.sse.codesandbox.io\",\n  cache: new InMemoryCache()\n});\n\nconst rootElement = document.getElementById(\"root\");\n\nfunction main(IndexComponent) {\n  return (\n      <StrictMode>\n      <ApolloProvider client={client}>\n        <IndexComponent />\n      </ApolloProvider>\n    </StrictMode>\n  );\n}\n\nrender(main(App), rootElement);\n\n// @ts-ignore\nif (module.hot) {\n  // @ts-ignore\n  module.hot.accept('./components', (event) => {\n      const PageComponent = require('./components');\n      render(main(PageComponent), appRootElement);\n  });\n}\n","import { Containers } from \"./components/container/container\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Hello World</h1>\n      <h2>Welcome to React with less Props!</h2>\n      <Containers />\n    </div>\n  );\n}\n"],"sourceRoot":""}